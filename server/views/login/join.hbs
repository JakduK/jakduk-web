<div class="wrapper" ng-controller="writeCtrl">

  {{> navigation}}

  <!--=== Breadcrumbs ===-->
  <div class="breadcrumbs">
    <div class="container">
      <h1 class="pull-left">{{TRANSLATION "user.register"}}</h1>
    </div><!--/container-->
  </div><!--/breadcrumbs-->
  <!--=== End Breadcrumbs ===-->

  <div class="container content">

    <div class="row">
      <div class="col-md-6 col-md-offset-3 col-sm-8 col-sm-offset-2">

        <!-- Reg-Form -->
        <form name="userWrite" action="/join{{#if bySocialAccount}}/oauth{{/if}}{{{redir}}}" method="POST" class="reg-page" ng-submit="onSubmit($event)">
          {{#if bySocialAccount}}<input type="hidden" name="tempToken" value="{{tempToken}}">{{/if}}

          <div class="reg-header">
            <h2>{{TRANSLATION "user.register.header"}}</h2>
          </div>

          <div class="form-group has-feedback"
             ng-class="{'has-success':userWrite.email.$valid && emailStatus === 'OK', 'has-error':!userWrite.email.$pristine && (userWrite.email.$invalid || emailStatus !== 'OK')}">
            <label class="control-label">
              <abbr title='{{TRANSLATION "common.msg.required"}}'>*</abbr>
              {{TRANSLATION "user.email"}}
            </label>
            <input type="email" name="email" class="form-control" placeholder='{{TRANSLATION "user.placeholder.email"}}' ng-model="email" ng-blur="onEmail()" ng-keyup="validationEmail()" ng-required="true" ng-minlength="emailLengthMin" ng-maxlength="emailLengthMax">

            <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok':userWrite.email.$valid && emailStatus === 'OK', 'glyphicon-remove':!userWrite.email.$pristine && (userWrite.email.$invalid || emailStatus !== 'OK')}"></span>

            <i class="fa fa-spinner fa-spin" ng-show="emailConn == 'connecting'"></i>
            <span ng-class="emailAlert.classType" ng-show="emailAlert.msg" ng-bind="emailAlert.msg"></span>
          </div>

          <div class="form-group has-feedback"
             ng-class="{'has-success':userWrite.username.$valid && usernameStatus === 'OK', 'has-error':!userWrite.username.$pristine && (userWrite.username.$invalid || usernameStatus !== 'OK')}">

            <label class="control-label">
              <abbr title='{{TRANSLATION "common.msg.required"}}'>*</abbr>
              {{TRANSLATION "user.nickname"}}
            </label>
            <input type="text" name="username" class="form-control" placeholder='{{TRANSLATION "user.placeholder.username"}}' ng-model="username" ng-blur="onUsername()" ng-keyup="validationUsername()" ng-required="true" ng-minlength="usernameLengthMin" ng-maxlength="usernameLengthMax">

            <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok':userWrite.username.$valid && usernameStatus === 'OK', 'glyphicon-remove':!userWrite.username.$pristine && (userWrite.username.$invalid || usernameStatus !== 'OK')}"></span>

            <i class="fa fa-spinner fa-spin" ng-show="usernameConn == 'connecting'"></i>
            <span ng-class="usernameAlert.classType" ng-show="usernameAlert.msg" ng-bind="usernameAlert.msg"></span>
          </div>


          {{#unless bySocialAccount}}
          <div class="row">
            <div class="col-sm-6">
              <div class="form-group has-feedback" ng-class="{'has-success':userWrite.password.$valid, 'has-error':!userWrite.password.$pristine && userWrite.password.$invalid}">
                <label class="control-label">
                  <abbr title='{{TRANSLATION "common.msg.required"}}'>*</abbr>
                  {{TRANSLATION "user.password"}}
                </label>
                <input type="password" name="password" class="form-control" placeholder='{{TRANSLATION "user.placeholder.password"}}' ng-model="password" ng-keyup="validationPassword()" ng-blur="equalPasswordConfirm()" ng-required="true" ng-minlength="passwordLengthMin" ng-maxlength="passwordLengthMax">

                <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok':userWrite.password.$valid, 'glyphicon-remove':!userWrite.password.$pristine && userWrite.password.$invalid}"></span>

                <span ng-class="passwordAlert.classType" ng-show="passwordAlert.msg" ng-bind="passwordAlert.msg"></span>
              </div>
            </div>

            <div class="col-sm-6">
              <div class="form-group has-feedback" ng-class="{'has-success':userWrite.passwordConfirm.$valid, 'has-error':!userWrite.passwordConfirm.$pristine && (userWrite.passwordConfirm.$invalid || equalPasswordStatus != 'true')}">
                <label class="control-label">
                  <abbr title='{{TRANSLATION "common.msg.required"}}'>*</abbr>
                  {{TRANSLATION "user.password.confirm"}}
                </label>
                <input type="password" name="passwordConfirm" class="form-control" placeholder='{{TRANSLATION "user.placeholder.password.confirm"}}' ng-model="passwordConfirm" ng-keyup="validationPasswordConfirm()" ng-blur="equalPasswordConfirm()" ng-required="true" ng-minlength="passwordLengthMin" ng-maxlength="passwordLengthMax"/>
                <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok':userWrite.passwordConfirm.$valid, 'glyphicon-remove':!userWrite.passwordConfirm.$pristine && (userWrite.passwordConfirm.$invalid || equalPasswordStatus != 'true')}"></span>
                <span class="passwordConfirmAlert.classType" ng-show="passwordConfirmAlert.msg" ng-bind=passwordConfirmAlert.msg></span>
              </div>
            </div>
          </div>
          {{/unless}}

          <div class="form-group">
            <label for="footballClub" class="control-label">{{TRANSLATION "user.support.football.club"}}</label>
            <select id="footballClub" name="footballClub" class="form-control">
              <option value="">{{TRANSLATION "common.none"}}</option>
              {{#each footballClubs as |club|}}
                {{#each names}}
                  <option value="{{club.id}}">{{fullName}}</option>
                {{/each}}
              {{/each}}
            </select>
          </div>

          <div class="form-group">
            <label class="control-label">{{TRANSLATION "user.comment"}}</label>
            <textarea name="about" class="form-control" cols="40" rows="3" placeholder='{{TRANSLATION "user.placeholder.about"}}'></textarea>
          </div>
          <hr>

          <div class="text-right">
            <button type="submit" class="btn-u rounded ladda-button"
              ladda="btnSubmit" data-style="expand-right">
              <span class="glyphicon glyphicon-upload"></span> {{TRANSLATION "common.button.write"}}
            </button>
            <button type="button" class="btn-u btn-u-default rounded" onclick="window.location='/'">
              <span class="glyphicon glyphicon-ban-circle"></span> {{TRANSLATION "common.button.cancel"}}
            </button>
            <div>
              <span ng-class="buttonAlert.classType" ng-show="buttonAlert.msg" ng-bind="buttonAlert.msg"></span>
            </div>
          </div>

        </form>

      </div>
    </div>

  </div><!-- /.container -->

  {{> footer}}

</div>
{{#CHUNK 'css'}}
  <link rel="stylesheet" href="/assets/unify/assets/css/pages/page_log_reg_v1.css"/>
{{/CHUNK}}
{{#CHUNK 'js'}}
  <script type="text/javascript">
    require([
      'angular', 'jakduk'
    ], function (angular, Jakduk) {
      angular.module("jakdukApp", [
        "angular-ladda", 'jakdukCommon'
      ]).controller("writeCtrl", ['$scope', '$http', '$window', function ($scope, $http, $window) {
        $scope.emailLengthMin = Jakduk.FormEmailLengthMin;
        $scope.emailLengthMax = Jakduk.FormEmailLengthMax;
        $scope.passwordLengthMin = Jakduk.FormPasswordLengthMin;
        $scope.passwordLengthMax = Jakduk.FormPasswordLengthMax;
        $scope.usernameLengthMin = Jakduk.FormUsernameLengthMin;
        $scope.usernameLengthMax = Jakduk.FormUsernameLengthMax;

        $scope.emailConn = "none";
        $scope.usernameConn = "none";
        $scope.emailAlert = {};
        $scope.usernameAlert = {};
        $scope.passwordAlert = {};
        $scope.passwordConfirmAlert = {};
        $scope.buttonAlert = {};
        $scope.equalPasswordStatus = "true";

        $window.onbeforeunload = function (e) {
          if (!$scope.btnSubmit && !$scope.userWrite.$pristine) {
            (e || window.event).returnValue = '{{TRANSLATION "common.msg.are.you.sure.leave.page"}}';
            return '{{TRANSLATION "common.msg.are.you.sure.leave.page"}}';
          }
        };

        $scope.onSubmit = function (event) {
          if ($scope.userWrite.$valid &&
            $scope.emailStatus === 'OK' &&
            $scope.usernameStatus === 'OK' &&
            $scope.equalPasswordStatus === "true") {
            $scope.btnSubmit = true;
          } else {
            if ($scope.userWrite.email.$invalid) {
              $scope.validationEmail();
            }

            if ($scope.userWrite.username.$invalid) {
              $scope.validationUsername();
            }

            if ($scope.userWrite.password) {
              $scope.equalPasswordConfirm();
            }

            $scope.buttonAlert = {
              "classType": "text-danger",
              "msg": '{{TRANSLATION "common.msg.need.form.validation"}}'
            };
            event.preventDefault();
          }
        };

        $scope.onEmail = function () {
          if ($scope.userWrite.email.$valid) {
            if ($scope.emailConn == "none") {
              $scope.emailConn = "connecting";
              $http.get('{{apiServerUrl}}/user/exist/email?email=' + encodeURIComponent($scope.email)).then(function () {
                $scope.emailStatus = 'OK';
                $scope.emailAlert = {
                  classType: "text-success",
                  msg: '{{TRANSLATION "user.msg.available.data"}}'
                };
                $scope.emailConn = "none";
              }, function () {
                $scope.emailStatus = 'INVALID';
                $scope.emailAlert = {
                  classType: "text-danger",
                  msg: '{{TRANSLATION "user.msg.already.email"}}'
                };
                $scope.emailConn = "none";
              });
            }
          } else {
            $scope.emailStatus = "INVALID";
            $scope.validationEmail();
          }
        };

        $scope.onUsername = function () {
          if ($scope.userWrite.username.$valid) {
            if ($scope.usernameConn == "none") {
              $scope.usernameConn = "connecting";
              $http.get('{{apiServerUrl}}/user/exist/username?username=' + encodeURIComponent($scope.username)).then(function () {
                $scope.usernameStatus = 'OK';
                $scope.usernameAlert = {
                  classType: "text-success",
                  msg: '{{TRANSLATION "user.msg.available.data"}}'
                };
                $scope.usernameConn = "none";
              }, function () {
                $scope.usernameStatus = 'INVALID';
                $scope.usernameAlert = {
                  classType: "text-danger",
                  msg: '{{TRANSLATION "user.msg.already.username"}}'
                };
                $scope.usernameConn = "none";
              });
            }
          } else {
            $scope.usernameStatus = 'INVALID';
            $scope.validationUsername();
          }
        };

        $scope.validationEmail = function () {
          if ($scope.userWrite.email.$invalid) {
            if ($scope.userWrite.email.$error.required) {
              $scope.emailAlert = {"classType": "text-danger", "msg": '{{TRANSLATION "common.msg.required"}}'};
            } else if ($scope.userWrite.email.$error.minlength || $scope.userWrite.email.$error.maxlength) {
              $scope.emailAlert = {"classType": "text-danger", "msg": '{{TRANSLATION "Size.userWrite.email"}}'};
            } else {
              $scope.emailAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "user.msg.check.mail.format"}}'
              };
            }
          } else {
            $scope.emailAlert = {
              classType: "text-info",
              msg: '{{TRANSLATION "common.msg.error.should.check.redundancy"}}'
            };
          }
        };

        $scope.validationUsername = function () {
          if ($scope.userWrite.username.$invalid) {
            if ($scope.userWrite.username.$error.required) {
              $scope.usernameAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "common.msg.required"}}'
              };
            } else if ($scope.userWrite.username.$error.minlength || $scope.userWrite.username.$error.maxlength) {
              $scope.usernameAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "Size.userWrite.username"}}'
              };
            }
          } else {
            $scope.usernameAlert = {
              classType: "text-info",
              msg: '{{TRANSLATION "common.msg.error.should.check.redundancy"}}'
            };
          }
        };

        $scope.validationPassword = function () {
          $scope.equalPasswordStatus = "false";
          $scope.passwordConfirmAlert = {};

          if ($scope.userWrite.password.$invalid) {
            if ($scope.userWrite.password.$error.required) {
              $scope.passwordAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "common.msg.required"}}'
              };
            } else if ($scope.userWrite.password.$error.minlength || $scope.userWrite.password.$error.maxlength) {
              $scope.passwordAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "Size.userWrite.password"}}'
              };
            }
          } else {
            $scope.passwordAlert = {
              classType: "text-success",
              msg: '{{TRANSLATION "user.msg.available.data"}}'
            };
          }
        };

        $scope.equalPasswordConfirm = function () {

          if ($scope.userWrite.password.$invalid) {
            $scope.passwordConfirmAlert = {
              classType: "text-danger",
              msg: '{{TRANSLATION "user.msg.password.mismatch"}}'
            };
          }

          if ($scope.userWrite.passwordConfirm.$invalid) return;

          if ($scope.password == $scope.passwordConfirm) {
            $scope.equalPasswordStatus = "true";
            $scope.passwordConfirmAlert = {
              classType: "text-success",
              msg: '{{TRANSLATION "user.msg.available.data"}}'
            };
          } else {
            $scope.passwordConfirmAlert = {
              classType: "text-danger",
              msg: '{{TRANSLATION "user.msg.password.mismatch"}}'
            };
          }
        };

        $scope.validationPasswordConfirm = function () {
          $scope.equalPasswordStatus = "false";

          if ($scope.userWrite.passwordConfirm.$invalid) {
            if ($scope.userWrite.passwordConfirm.$error.required) {
              $scope.passwordConfirmAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "common.msg.required"}}'
              };
            } else if ($scope.userWrite.passwordConfirm.$error.minlength || $scope.userWrite.passwordConfirm.$error.maxlength) {
              $scope.passwordConfirmAlert = {
                classType: "text-danger",
                msg: '{{TRANSLATION "Size.userWrite.password"}}'
              };
            }
          } else {
            $scope.passwordConfirmAlert = {
              classType: "text-info",
              msg: '{{TRANSLATION "common.msg.error.should.check.redundancy"}}'
            };
          }
        };

        {{#if bySocialAccount}}
          {{#if snsProfile.email}}
            $scope.email = '{{snsProfile.email}}';
            (function () {
              var deregister = $scope.$watch('email', function () {
                $scope.onEmail();
                $scope.userWrite.email.$pristine = false;
                deregister();
              });
            })();
          {{/if}}
          {{#if snsProfile.username}}
            $scope.username = '{{snsProfile.username}}';
            (function () {
              var deregister = $scope.$watch('email', function () {
                $scope.onUsername();
                $scope.userWrite.username.$pristine = false;
                deregister();
              });
            })();
          {{/if}}
        {{/if}}
      }]);

      angular.bootstrap(document, ['jakdukApp']);
    });
  </script>
{{/CHUNK}}
