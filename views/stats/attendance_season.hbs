<div class="wrapper" ng-controller="statsCtrl">

  {{> navigation}}

  <!--=== Breadcrumbs ===-->
  <div class="breadcrumbs">
    <div class="container">
      <h1 class="pull-left">
        <a href="/stats/attendance/season" target="_self">{{TRANSLATION "stats.attendance"}}</a>
      </h1>
      <ul class="pull-right breadcrumb">
        <li>
          <a href="/stats/attendance/league">{{TRANSLATION "stats.attendance.breadcrumbs.league"}}</a>
        </li>
        <li>
          <a href="/stats/attendance/club">{{TRANSLATION "stats.attendance.breadcrumbs.club"}}</a>
        </li>
        <li class="active">{{TRANSLATION "stats.attendance.breadcrumbs.season"}}</li>
      </ul>
    </div><!--/container-->
  </div><!--/breadcrumbs-->
  <!--=== End Breadcrumbs ===-->

  <!--=== Content Part ===-->
  <div class="container content">

    <div class="alert alert-info" ng-class="alert.classType" ng-show="alert.msg"><p ng-bind="alert.msg"></p></div>

    <div class="row">
      <div class="col-xs-8 col-sm-4 col-md-3">
        <select class="form-control" ng-model="season" ng-change="changeSeason()" ng-options='season for season in seasons'>
          <option value="">{{TRANSLATION "stats.select.season"}}</option>
        </select>
        <span class="color-blue" ng-class="{'hidden':season}">{{TRANSLATION "stats.msg.choose.season"}}</span>
      </div>
      <div class="col-xs-8 col-sm-4 col-md-3">
        <select class="form-control" ng-model="leagueId" ng-change="changeLeague()" ng-options='key as value.name disable when value.disable for (key, value) in leagues[season]'>
          <option value="">{{TRANSLATION "stats.select.league"}}</option>
        </select>
        <span class="color-blue" ng-class="{'hidden':leagueId}">{{TRANSLATION "stats.msg.choose.league"}}</span>
      </div>
    </div>

    <highchart id="chart1" config="chartConfig" class="margin-bottom-10"></highchart>

    <div class="tag-box tag-box-v4 margin-bottom-20">
      <h2 ng-bind="chartConfig.title.text"></h2>
      <p>{{{TRANSLATION "stats.msg.total.number.of.clubs" n="<strong ng-bind=\"chartConfig.series[0].data.length | number:0\"></strong>"}}}</p>
      <p>{{{TRANSLATION "stats.msg.total.number.of.attendance.matches" n="<strong ng-bind=\"gamesSum | number:0\"></strong>"}}}</p>
      <p>{{{TRANSLATION "stats.msg.total.number.of.attendance.total" n="<strong ng-bind=\"totalSum | number:0\"></strong>"}}}</p>
      <p>{{{TRANSLATION "stats.msg.total.number.of.attendance.average" n="<strong ng-bind=\"average | number:0\"></strong>"}}}</p>
    </div>

    <div class="text-right">
      <button class="btn-u btn-brd rounded btn-u-xs" type="button" ng-click="btnUrlCopy()" tooltip-popup-close-delay='300' uib-tooltip='{{TRANSLATION "common.msg.copy.to.clipboard"}}'>
        <i class="icon-link"></i>
      </button>
      <button id="kakao-link-btn" class="btn btn-link rounded" ng-click="sendLink()" tooltip-popup-close-delay='300' uib-tooltip='{{TRANSLATION "common.msg.send.to.kakao"}}'>
        <img src="//dev.kakao.com/assets/img/about/logos/kakaolink/kakaolink_btn_small.png">
      </button>
    </div>
  </div> <!-- End Content Part -->

  {{> footer}}

</div> <!-- End Wrapper -->
{{#CHUNK 'css'}}
  <link rel="stylesheet" href="/unify/assets/plugins/cube-portfolio/cubeportfolio/css/cubeportfolio.min.css">
  <link rel="stylesheet" href="/unify/assets/plugins/cube-portfolio/cubeportfolio/custom/custom-cubeportfolio.css">
{{/CHUNK}}
{{#CHUNK 'js'}}
  <script type="text/javascript">
    require([
      'angular', 'kakao', 'jakduk', 'angular-highcharts'
    ], function (angular, Kakao, Jakduk) {
      angular.module("jakdukApp", [
        "highcharts-ng", "ui.bootstrap", 'jakdukCommon'
      ]).controller('statsCtrl', ['$scope', '$http', '$window', function ($scope, $http, $window) {
        var KLId = 'KL';
        var KLCLId = 'KLCL';
        var KLCHId = 'KLCH';
        var KLname = '{{TRANSLATION "stats.attendance.filter.league"}}';
        var KLCLname = '{{TRANSLATION "stats.attendance.filter.league.classic"}}';
        var KLCHname = '{{TRANSLATION "stats.attendance.filter.league.challenge"}}';
        var season = Number("{{season}}");
        var league = "{{league}}";
        var leagueKeys = [];

        $scope.leagues = {
          2012: {
            'KL': {name: KLname},
            'KLCL': {name: KLCLname, disable: true},
            'KLCH': {name: KLCHname, disable: true}
          },
          2013: {'KL': {name: KLname}, 'KLCL': {name: KLCLname}, 'KLCH': {name: KLCHname}},
          2014: {'KL': {name: KLname}, 'KLCL': {name: KLCLname}, 'KLCH': {name: KLCHname}}
        };
        $scope.seasons = [2012, 2013, 2014];

        $scope.attendancesConn = "none";
        $scope.footballClubs = angular.fromJson('{{{DEFAULT_VALUE (JSON_STRINGIFY footballClubs) '{}'}}}');
        $scope.attendances = {};
        $scope.alert = {};
        $scope.rememberLeague = null;
        $scope.totalSum = 0;
        $scope.gamesSum = 0;
        $scope.average = 0;

        if ($scope.seasons.indexOf(season) >= 0) {
          $scope.season = season;
        } else {
          $scope.season = 2014;
        }

        for (var key1 in $scope.leagues[$scope.season]) {
          var key2 = $scope.leagues[$scope.season][key1];

          if (key2.disable != true) {
            leagueKeys.push(key1);
          }
        }

        if (leagueKeys.indexOf(league) >= 0) {
          $scope.leagueId = league;
        } else {
          $scope.leagueId = KLId;
        }

        Highcharts.setOptions({
          lang: {
            thousandsSep: ','
          }
        });

        $scope.chartConfig = {
          options: {
            chart: {
              type: 'bar',
              height: 200
            },
            tooltip: {
              shared: true
            }
          },
          title: {
            text: '{{TRANSLATION "stats.attendance"}}'
          },
          subtitle: {
            text: 'Source: ' + Jakduk.origin
          },
          xAxis: {
            type: 'category',
            labels: {
              style: {
                fontSize: '13px'
              }
            },
            crosshair: true
          },
          yAxis: [{ // Total yAxis
            min: 0,
            title: {
              text: '{{TRANSLATION "stats.attendance.total"}}',
              align: 'middle'
            },
            labels: {
              x: 0,
              rotation: -30,
              formatter: function () {
                return Highcharts.numberFormat(this.value, 0);
              }
            },
            opposite: true
          },
            { // Average yAxis
              min: 0,
              title: {
                text: '{{TRANSLATION "stats.attendance.average"}}'
              },
              labels: {
                x: 0,
                rotation: -30,
                formatter: function () {
                  return Highcharts.numberFormat(this.value, 0);
                }
              }
            }],
          series: [{
            name: '{{TRANSLATION "stats.attendance.total"}}',
            yAxis: 0,
            data: [],
            dataLabels: {
              enabled: true,
              color: '#FFFFFF',
              align: 'right',
              format: '{point.y:,.0f} {{TRANSLATION "stats.attendance.people"}}',
              style: {
                fontSize: '13px'
              }
            }
          },
            {
              name: '{{TRANSLATION "stats.attendance.average"}}',
              yAxis: 1,
              data: [],
              dataLabels: {
                enabled: true,
                color: '#FFFFFF',
                align: 'right',
                format: '{point.y:,.0f} {{TRANSLATION "stats.attendance.people"}}',
                style: {
                  fontSize: '13px'
                }
              }
            }],
          loading: true,
          credits: {enabled: true}
        };

        $scope.getAttendance = function () {
          if ($scope.attendancesConn == "none") {

            $scope.chartConfig.loading = true;
            $scope.attendancesConn = "loading";

            $http.get('{{apiServerUrl}}/stats/attendance/season/' + $scope.season + '?league=' + KLId).then(function (response) {
              $scope.attendances[$scope.season] = response.data;
              $scope.attendancesConn = "none";
              $scope.chartConfig.loading = false;
              $scope.refreshData();
            }, function (response) {
              var data = response.data;
              $scope.attendancesConn = "none";
              $scope.alert.msg = data.message;
              $scope.alert.classType = "alert-danger";
            });
          }
        };

        $scope.refreshData = function () {
          if (!$scope.leagueId) {
            return;
          }

          $scope.chartConfig.series.forEach(function (series) {
            series.data = [];
          });

          var attendances = $scope.attendances[$scope.season];
          var totalSum = 0;
          var gamesSum = 0;

          attendances.forEach(function (attendance) {
            if ($scope.leagueId == KLId || $scope.leagueId == attendance.league) {
              var clubName = 'Unknown';
              $scope.footballClubs.some(function (club) {
                if (club.origin.id === (attendance.club && attendance.club.id)) {
                  clubName = club.names[0].fullName;
                  return true;
                }
                return false;
              });
              var itemTotal = [clubName, attendance.total];
              var itemAverage = [clubName, attendance.average];
              totalSum += attendance.total;
              gamesSum += attendance.games;

              $scope.chartConfig.series[0].data.push(itemTotal);
              $scope.chartConfig.series[1].data.push(itemAverage);
            }
            $scope.totalSum = totalSum;
            $scope.average = totalSum / gamesSum;
            $scope.gamesSum = gamesSum;
          });

          $scope.chartConfig.title.text = $scope.season + ' ' + $scope.leagues[$scope.season][$scope.leagueId].name + ' {{TRANSLATION "stats.attendance"}}';
          $scope.chartConfig.options.chart.height = 300 + ($scope.chartConfig.series[0].data.length * 35);

        };

        $scope.changeSeason = function () {
          $scope.rememberLeague = $scope.leagueId;

          if ($scope.season != null) {
            if (Jakduk.isEmpty($scope.attendances[$scope.season])) {
              $scope.getAttendance();
            } else {
              $scope.refreshData();
            }
          }
        };

        $scope.changeLeague = function () {
          if ($scope.leagueId != null) {
            $scope.refreshData();
          }
        };

        $scope.btnUrlCopy = function () {
          var url = Jakduk.origin + '/stats/attendance/season?season=' + $scope.season + '&league=' + $scope.leagueId;

          if ($window.clipboardData) {
            // IE처리
            // 클립보드에 문자열 복사
            $window.clipboardData.setData('text', url);

            // 클립보드의 내용 가져오기
            // window.clipboardData.getData('Text');

            // 클립보드의 내용 지우기
            // window.clipboardData.clearData("Text");
          } else {
            // 비IE 처리
            $window.prompt('{{TRANSLATION "common.msg.copy.to.clipboard"}}', url);
          }
        };

        $scope.sendLink = function () {
          var label = $scope.chartConfig.title.text + '\r{{TRANSLATION "stats"}} · {{TRANSLATION "common.jakduk"}}';
          var url = Jakduk.origin + '/stats/attendance/season?season=' + $scope.season + '&league=' + $scope.leagueId;

          Kakao.Link.sendTalkLink({
            label: label,
            webLink: {
              text: url,
              url: url
            }
          });
        };

        $scope.getAttendance();

      }]);

      angular.bootstrap(document, ['jakdukApp']);

      Kakao.init('{{kakaoClientID}}');
    });
  </script>
{{/CHUNK}}
