<div class="wrapper">

  {{> navigation}}

  <!--=== Breadcrumbs ===-->
  <div class="breadcrumbs">
    <div class="container">
      <h1 class="pull-left"><a href="/jakdu">{{TRANSLATION "jakdu.view"}}</a></h1>
    </div><!--/container-->
  </div><!--/breadcrumbs-->
  <!--=== End Breadcrumbs ===-->

  <!--=== Content Part ===-->
  <div class="container content" ng-controller="jakduCtrl">

    <div class="row margin-bottom-30">
      <div class="col-xs-4 content-boxes-v6">
        <i class="rounded-x  icon-sport-011 "></i>
        <h1 class="title-v3-md text-uppercase margin-bottom-10" ng-bind="jakduSchedule.home.name"></h1>
        <p>Home</p>
      </div>
      <div class="col-xs-4">
        <div class="service-block-v1">
          <i class="rounded-x icon-sport-119"></i>
          <h3 class="title-v3-bg text-uppercase" ng-bind="jakduSchedule.score.homeFullTime + ':' + jakduSchedule.score.awayFullTime"></h3>
          <p>Score</p>
        </div>
      </div>
      <div class="col-xs-4 content-boxes-v6">
        <i class="rounded-x  icon-sport-011 "></i>
        <h2 class="title-v3-md text-uppercase margin-bottom-10" ng-bind="jakduSchedule.away.name"></h2>
        <p>Away</p>
      </div>
    </div>

    <div class="row">
      <div class="col-xs-6">
        <div class="panel panel-info margin-bottom-5">
          <div class="panel-heading text-center">
            <h4 class="panel-title">
              {{TRANSLATION "jakdu.expect.home.score"}} : <span ng-bind="myHomeScore"></span>
            </h4>
          </div>
          <div class="panel-body">
            <div class="center-block jakduk-number-pad">
              <div class="jakduk-number-pad-row">
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="0">0</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="1">1</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="2">2</label>
              </div>
              <div class="jakduk-number-pad-row">
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="3">3</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="4">4</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="5">5</label>
              </div>
              <div class="jakduk-number-pad-row">
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="6">6</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="7">7</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="8">8</label>
              </div>
              <div class="jakduk-number-pad-row">
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="9">9</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="10">10</label>
                <label class="btn btn-primary" ng-model="myHomeScore" uib-btn-radio="11">11</label>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-xs-6">
        <div class="panel panel-success margin-bottom-5">
          <div class="panel-heading text-center">
            <h4 class="panel-title">
              {{TRANSLATION "jakdu.expect.away.score"}} : <span ng-bind="myAwayScore"></span>
            </h4>
          </div>
          <div class="panel-body">
            <div class="center-block jakduk-number-pad">
              <div class="jakduk-number-pad-row">
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="0">0</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="1">1</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="2">2</label>
              </div>
              <div class="jakduk-number-pad-row">
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="3">3</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="4">4</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="5">5</label>
              </div>
              <div class="jakduk-number-pad-row">
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="6">6</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="7">7</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="8">8</label>
              </div>
              <div class="jakduk-number-pad-row">
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="9">9</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="10">10</label>
                <label class="btn btn-success" ng-model="myAwayScore" uib-btn-radio="11">11</label>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row text-center">
      {{#if isAuthenticated}}
        <button type="button" class="btn-u btn-u-blue rounded ladda-button"
          ng-click="btnGoJakdu()"
          ladda="goJakdu" data-style="expand-right" data-spinner-color="Gainsboro">
          <strong>
            <i aria-hidden="true" class="fa fa-hand-scissors-o fa-lg"></i>
            {{TRANSLATION "common.button.go.jakdu"}}
          </strong>
        </button>
      {{else}}
        <button type="button" class="btn-u btn-u-blue rounded" ng-click="needLogin();">
          <strong>
            <i aria-hidden="true" class="fa fa-hand-scissors-o fa-lg"></i>
            {{TRANSLATION "common.button.go.jakdu"}}
          </strong>
        </button>
      {{/if}}
      <div ng-class="goJakduAlert.classType" ng-show="goJakduAlert.msg" ng-bind="goJakduAlert.msg"></div>
    </div>

    <!-- comment -->
    <div ng-controller="commentCtrl">

      <input type="hidden" id="commentCount" value="{%commentCount%}">

      <!-- 댓글 목록  -->
      <div class="media margin-bottom-10">

        <h2 class="heading-sm text-primary">
          <i class="fa fa-comments"></i>
          <span infinite-scroll="initComment()" infinite-scroll-disabled="infiniteDisabled">
            {{TRANSLATION "board.msg.comment.count" n="<span ng-bind=\" commentCount\"></span>"}}
          </span>
          <button type="button" class="btn btn-link" ng-click="btnRefreshComment()"
            tooltip-popup-close-delay='300' uib-tooltip='{{TRANSLATION "common.button.refresh.comments"}}'>
            <i class="fa fa-refresh text-muted" ng-class="{'fa-spin':loadCommentConn == 'connecting'}"></i>
          </button>
        </h2>

        <div class="media-body ng-cloak">
          <div ng-repeat="comment in comments">
            <h6 class="clearfix">
              <i aria-hidden="true" class="icon-user"></i>
              <span ng-bind="comment.writer.username"></span>
              <span class="pull-right" ng-bind="comment.id | dateFromObjectId | date:'medium'"></span>
            </h6>

            <p>
              <span aria-hidden="true" class="icon-screen-smartphone" ng-if="comment.status.device == 'mobile'"></span>
              <span aria-hidden="true" class="icon-screen-tablet" ng-if="comment.status.device == 'tablet'"></span>
              <span ng-bind-html="comment.contents"></span>
            </p>

            <button type="button" class="btn btn-xs rounded btn-dropbox" ng-click="btnCommentFeeling(comment.id, 'LIKE')"
              tooltip-popup-close-delay='300' uib-tooltip='{{TRANSLATION "common.button.like"}}'>
                <span ng-init="numberOfCommentLike[comment.id]=comment.usersLiking.length">
                  <i class="fa fa-thumbs-o-up fa-lg"></i>
                  <span ng-bind="numberOfCommentLike[comment.id]"></span>
                </span>
            </button>
            <button type="button" class="btn btn-xs rounded btn-weibo" ng-click="btnCommentFeeling(comment.id, 'DISLIKE')"
              tooltip-popup-close-delay='300' uib-tooltip='{{TRANSLATION "common.button.dislike"}}'>
                <span ng-init="numberOfCommentDislike[comment.id]=comment.usersDisliking.length">
                  <i class="fa fa-thumbs-o-down fa-lg"></i>
                  <span ng-bind="numberOfCommentDislike[comment.id]"></span>
                </span>
            </button>
            <div class="text-danger" ng-show="commentFeelingConn[comment.id]" ng-bind="commentFeelingAlert[comment.id]"></div>
            <hr class="padding-5">
          </div>

          <div class="margin-bottom-10" ng-show="commentCount || commentAlert.msg">
            <button type="button" class="btn-u btn-brd rounded btn-block btn-u-dark"
              ng-click="btnMoreComment()" ng-show="commentCount">
              {{TRANSLATION "common.button.more.comments"}}
              <i class="fa fa-angle-down"></i>
              <i class="fa fa-circle-o-notch fa-spin" ng-show="loadCommentConn == 'connecting'"></i>
            </button>
          </div>

          <div class="contex-bg" ng-show="commentAlert.msg">
            <p ng-class="commentAlert.classType" class="rounded" ng-bind="commentAlert.msg"></p>
          </div>
        </div>
      </div>

      <!-- 댓글 남기기 -->
      <div class="post-comment">
        <h4 class="text-primary">
          {{TRANSLATION "board.comment.leave.comment"}}
        </h4>
        <div class="margin-bottom-10">
          <summernote config="options" on-keyUp="focus(evt)"
            ng-model="summernote.contents" ng-init="summernote={contents:'',id:'{{id}}'}"></summernote>
          <span ng-class="summernoteAlert.classType" ng-show="summernoteAlert.msg" ng-bind="summernoteAlert
          .msg"></span>
        </div>

        <div class="margin-bottom-10">
          {{#if isAuthenticated}}
            <button type="button" class="btn-u btn-brd rounded btn-u-sm ladda-button"
              ng-click="btnWriteComment()"
              ladda="writeComment" data-style="expand-right" data-spinner-color="Gainsboro">
              <span aria-hidden="true" class="icon-pencil"></span>
              {{TRANSLATION "common.button.write.comment"}}
            </button>
          {{else}}
            <button type="button" class="btn-u btn-brd rounded btn-u-default disabled" disabled="disabled">
              <span aria-hidden="true" class="icon-pencil"></span>
              {{TRANSLATION "common.button.write.comment"}}
            </button>
          {{/if}}
          <span class="ng-cloak">{%summernote.contents.length%} / {%boardCommentContentLengthMax%}</span>
        </div>
        <div>
          <span ng-class="writeCommentAlert.classType" ng-show="writeCommentAlert.msg" ng-bind="writeCommentAlert
          .msg"></span>
        </div>
      </div>

    </div> <!-- End Comment -->

  </div> <!--=== End Content Part ===-->

  {{> footer}}

</div> <!-- End wrapper -->
{{#CHUNK 'css'}}
  <link rel="stylesheet" href="/unify/assets/css/pages/blog.css">
  <link rel="stylesheet" href="/bower_components/summernote/dist/summernote.css">
{{/CHUNK}}
{{#CHUNK 'js'}}
  <script type="text/javascript">
    require([
      'angular', 'jakduk',
      {{#if (SUMMERNOTE_LOCALE locale)}}
        'summernote-{{SUMMERNOTE_LOCALE locale}}',
      {{/if}}
      'angular-ladda',
      'angular-infinite-scroll',
      'angular-summernote'
    ], function (angular, Jakduk) {
      angular.module("jakdukApp", ['ui.bootstrap', 'angular-ladda', 'summernote', 'infinite-scroll', 'jakdukCommon', 'ngSanitize'])
        .controller('jakduCtrl', function ($scope, $http) {
          $scope.btnGoJakdu = btnGoJakdu;
          $scope.getDataSchedule = getDataSchedule;

          $scope.dataScheduleConn = "none";   // 작두 데이터 커넥션 상태
          $scope.jakduSchedule = {};          // 작두 데이터
          $scope.goJakduAlert = {};		// 댓글 남기기 버튼 상태 문구

          // 작두 타기 단추.
          function btnGoJakdu() {
            var reqData = {};

            if (Jakduk.isEmpty($scope.myHomeScore) || Jakduk.isEmpty($scope.myAwayScore)) {
              $scope.goJakduAlert = {
                "classType": "text-danger",
                "msg": '{{TRANSLATION "jakdu.choose.expected.score"}}'
              };
              return;
            }

            {{#if (NOT isAuthenticated)}}
              if (!confirm('{{TRANSLATION "board.msg.need.login.for.write"}}')) {
                return;
              }
            {{/if}}

            reqData.homeScore = $scope.myHomeScore;
            reqData.awayScore = $scope.myAwayScore;
            reqData.jakduScheduleId = "{{id}}";

            $scope.goJakdu = true;

            $http.post('{{apiServerUrl}}/jakdu/myJakdu', reqData).then(function (response) {
              var data = response.data;
              $scope.goJakdu = false;
              $scope.goJakduAlert = {};
            }, function (response) {
              var data = response.data;
              alert(data.message);
              $scope.goJakdu = false;
            });
          }

          // 작두 정보.
          function getDataSchedule() {
            if ($scope.dataScheduleConn == "none") {
              $scope.dataScheduleConn = "loading";

              $http.get('{{apiServerUrl}}/jakdu/schedule/{{id}}').then(function (response) {
                var data = response.data;

                if (data.jakduSchedule != null) {
                  $scope.jakduSchedule = data.jakduSchedule;
                }

                if (data.myJakdu != null) {
                  $scope.myHomeScore = data.myJakdu.homeScore;
                  $scope.myAwayScore = data.myJakdu.awayScore;
                }

                $scope.dataScheduleConn = "none";
              }, function () {
                $scope.dataScheduleConn = "none";
                $scope.error = '{{TRANSLATION "common.msg.error.network.unstable"}}';
              });
            }
          }

          getDataSchedule();
        })
        .controller('commentCtrl', function ($scope, $http) {
          $scope.boardCommentContentLengthMin = Jakduk.BoardCommentContentLengthMin;
          $scope.boardCommentContentLengthMax = Jakduk.BoardCommentContentLengthMax;

          $scope.comments = [];					// 댓글들
          $scope.commentAlert = {};				// 댓글 상태 문구
          $scope.summernoteAlert = {};			// summernote 상태 문구
          $scope.commentFeelingConn = {};			// 댓글들 좋아요 싫어요 커넥션
          $scope.commentFeelingAlert = {};		// 댓글들 좋아요 싫어요 상태 문구
          $scope.numberOfCommentLike = {};		// 댓글들 좋아요 수
          $scope.numberOfCommentDislike = {};		// 댓글들 싫어요 수
          $scope.loadCommentConn = "none";		// 댓글 가져오기 커넥션
          $scope.writeCommentConn = "none";		// 댓글 남기기 커넥션
          $scope.writeCommentAlert = {};			// 댓글 남기기 버튼 상태 문구
          $scope.infiniteDisabled = false;		// infinite disabled 여부

          // summernote config
          $scope.options = {
            height: 0,
            //placeholder: '{{TRANSLATION "board.msg.write.text.here"}}',
            lang: "{{SUMMERNOTE_LOCALE locale}}",
            toolbar: [
              ['font', ['bold']],
              // ['fontsize', ['fontsize']], // Still buggy
              ['color', ['color']],
              ['insert', ['link']],
              ['help', ['help']]
            ]
          };

          {{#if (NOT isAuthenticated)}}
            $scope.summernoteAlert = {
              "classType": "text-danger",
              "msg": '{{TRANSLATION "board.msg.need.login.for.write"}}'
            };
          {{/if}}

          $scope.focus = function (e) {
            {{#if (NOT isAuthenticated)}}
              if (confirm('{{TRANSLATION "board.msg.need.login.for.write"}}')) {
                location.href = '/login{{{redir}}}';
              }
            {{/if}}
          };

          // 댓글 남기기
          $scope.btnWriteComment = function () {
            var bUrl = '{{apiServerUrl}}/jakdu/schedule/comment';

            if ($scope.summernote.contents.length < Jakduk.BoardCommentContentLengthMin
              || $scope.summernote.contents.length > Jakduk.BoardCommentContentLengthMax) {
              $scope.summernoteAlert = {
                "classType": "text-danger",
                "msg": '{{TRANSLATION "Size.board.comment.content"}}'
              };
              return;
            }

            if ($scope.writeCommentConn == "none") {
              var reqPromise = $http.post(bUrl, $scope.summernote);
              $scope.writeCommentConn = "connecting";
              $scope.writeComment = true;

              reqPromise.then(function (response) {
                var data = response.data;
                $scope.btnMoreComment();

                $scope.summernote.contents = "";
                $scope.commentAlert = {};
                $scope.summernoteAlert = {};
                $scope.writeCommentAlert = {};
                $scope.writeCommentConn = "none";
                $scope.writeComment = false;
              }, function (response) {
                var data = response.data;
                $scope.writeCommentAlert = {"classType": "text-danger", "msg": data.message};
                $scope.writeCommentConn = "none";
                $scope.writeComment = false;
              });
            }
          };

          // infinite 초기 설정
          $scope.initComment = function () {
            $scope.loadComments("init", "");
            $scope.infiniteDisabled = true;
          };

          // 댓글 목록 가져오기.
          $scope.loadComments = function (type, commentId) {
            var bUrl = '{{apiServerUrl}}/jakdu/schedule/comments/{{id}}?commentId=' + commentId;

            if ($scope.loadCommentConn == "none") {
              var reqPromise = $http.get(bUrl);

              $scope.loadCommentConn = "connecting";

              reqPromise.then(function (response) {
                var data = response.data;

                if (data.jakduSchedule) {
                  $scope.commentCount = data.count;

                  if (data.comments.length < 1) { // 댓글이 하나도 없을때
                    if (type == "init") {
                    } else {
                      $scope.commentAlert.msg = '{{TRANSLATION "board.msg.there.is.no.new.comment"}}';
                      $scope.commentAlert.classType = "bg-warning";
                    }
                  } else {	// 댓글을 1개 이상 가져왔을 때
                    if (type == "init" || type == "btnRefreshComment") {
                      $scope.comments = data.comments;
                    } else if (type == "btnMoreComment" || type == "btnWriteComment") {
                      $scope.comments = $scope.comments.concat(data.comments);
                    }
                  }
                }

                $scope.loadCommentConn = "none";
              }, function () {
                $scope.loadCommentConn = "none";
              });
            }
          };

          // 댓글 더보기 단추.
          $scope.btnMoreComment = function () {
            if ($scope.comments.length > 0) {
              var lastComment = $scope.comments[$scope.comments.length - 1];
              $scope.loadComments("btnMoreComment", lastComment.id);
            } else {
              $scope.loadComments("btnMoreComment", "");
            }
          };

          // 댓글 새로고침 단추.
          $scope.btnRefreshComment = function () {
            $scope.commentAlert = {};
            $scope.comments = [];
            $scope.loadComments("btnRefreshComment", "");
          };

          // 댓글 감정 표현
          $scope.btnCommentFeeling = function (commentId, status) {
            var conn = $scope.commentFeelingConn[commentId];

            if (conn == "none" || conn == null) {
              $scope.commentFeelingConn[commentId] = "loading";

              $http.post('{{apiServerUrl}}/jakdu/schedule/comment/' + commentId + '/' + status).then(function (response) {
                var data = response.data;

                if (data.feeling == 'LIKE') {
                  $scope.numberOfCommentLike[commentId] = data.numberOfLike;
                } else if (data.feeling == 'DISLIKE') {
                  $scope.numberOfCommentDislike[commentId] = data.numberOfDislike;
                }

                $scope.commentFeelingAlert[commentId] = '';
                $scope.commentFeelingConn[commentId] = "ok";

              }, function (response) {
                var data = response.data;
                $scope.commentFeelingConn[commentId] = "none";
                $scope.commentFeelingAlert[commentId] = data.message;
              });
            }
          };

          $scope.needLogin = function () {
            if (confirm('{{TRANSLATION "jakdu.msg.need.login.to.go.jakdu"}}')) {
              window.location = '/login{{{redir}}}';
            }
          }
        });

      angular.bootstrap(document, ['jakdukApp']);
    });
  </script>
{{/CHUNK}}