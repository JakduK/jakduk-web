<div class="wrapper">

  {{> navigation}}

  <!--=== Breadcrumbs ===-->
  <div class="breadcrumbs">
    <div class="container">
      <h1 class="pull-left">{{TRANSLATION "board.write"}}</h1>
    </div><!--/container-->
  </div><!--/breadcrumbs-->
  <!--=== End Breadcrumbs ===-->

  <div class="container content" ng-controller="FreeWriteCtrl">
    <div class="alert alert-danger" ng-show="submitErred" ng-if="submitErred" style="display:none;">
      <p>{{TRANSLATION 'common.msg.error.406'}}</p>
    </div>

    <form name="boardFreeWrite" ng-submit="onSubmit($event)">
      <div class="form-group" ng-class="{'has-success': boardFreeWrite.category.$valid, 'has-error': !boardFreeWrite.category.$pristine && boardFreeWrite.category.$invalid}">
        <div class="row">
          <div class="col-sm-3">
            <label for="category" class="control-label">
              <abbr title="required">*</abbr> {{TRANSLATION "board.category"}}
            </label>
            <select id="category" name="category" class="form-control" ng-model="category" ng-change="validationCategory()" ng-required="true">
              <option value="">{{TRANSLATION "board.category.init"}}</option>
            {{#each categories as |category|}}
              <option value="{{category.code}}">{{CATEGORY_NAME category ../locale}}</option>
            {{/each}}
            </select>
            <span ng-class="categoryAlert.classType" ng-show="categoryAlert.msg" ng-bind="categoryAlert.msg"></span>
          </div>
        </div>
      </div>

      <div class="form-group has-feedback" ng-class="{'has-success': boardFreeWrite.subject.$valid, 'has-error': !boardFreeWrite.subject.$pristine && boardFreeWrite.subject.$invalid}">
        <label for="subject" class="control-label">
          <abbr title="required">*</abbr> {{TRANSLATION "board.subject"}}
        </label>
        <input type="text" name="subject" class="form-control" placeholder='{{TRANSLATION "board.placeholder.subject"}}'
          ng-model="subject" ng-change="validationSubject()" ng-model-options="{ debounce: 400 }"
          ng-required="true" ng-minlength="3" ng-maxlength="60">
        <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok': boardFreeWrite.subject.$valid,
        'glyphicon-remove': !boardFreeWrite.subject.$pristine && boardFreeWrite.subject.$invalid}"></span>
        <span ng-class="subjectAlert.classType" ng-show="subjectAlert.msg" ng-bind="subjectAlert.msg"></span>
      </div>

      <div class="form-group" ng-class="{'has-success': content.length >= 5, 'has-error': isWrongContent}">
        <label for="content" class="control-label">
          <abbr title="required">*</abbr> {{TRANSLATION "board.content"}}
        </label>
        <summernote config="options" ng-model="content" on-image-upload="imageUpload(files, editor)" editable="editable"  on-keyup="isWrongContent = content.length < 5" on-keydown="isWrongContent = content.length < 5"></summernote>
        <p ng-class="contentAlert.classType" ng-show="contentAlert.msg" ng-bind="contentAlert.msg"></p>
      </div>

      <h4 class="text-primary" ng-show="storedImages.length > 0 || uploader.queue.length > 0">
        {{TRANSLATION "board.gallery.list"}}
      </h4>

      <!-- sotred Images -->
      <div class="media" ng-repeat="item in storedImages">
        <div class="media-left media-middle">
          <img class="media-object" ng-src="{{thumbnailServerUrl}}/gallery/{%item.id%}" style="width: 50px;">
        </div>
        <div class="media-body">
          <h5 class="media-heading">
            <button type="button" class="btn btn-success btn-xs" ng-click="insertImage(item)">
              <span class="glyphicon glyphicon-upload"></span>
            </button>
            <button type="button" class="btn btn-danger btn-xs" ng-click="removeStoredItem(item)">
              <span class="glyphicon glyphicon-remove-circle"></span>
            </button>
            <small>{%item.size/1024|number:1%} KB</small>
          </h5>
          <div class="form-group has-feedback" ng-class="{'has-success': item.name.length >= 2, 'has-warning': item.name.length < 2 || item.name == null}">
            <input type="text" class="form-control input-sm col-md-2 has-error" placeholder='{{TRANSLATION "gallery.placeholder.name"}}' ng-model="item.name" ng-blur="onGalleryItem(item, 'stored')">
            <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok':item.name.length >= 2, 'glyphicon-warning-sign':item.name.length < 2 || item.name == null}"></span>
          </div>
        </div>
      </div>
      <!-- queue Images -->
      <div class="media" ng-repeat="item in uploader.queue">
        <div class="media-left media-middle">
          <img class="media-object" ng-src="{%item._url%}" style="width: 50px;">
        </div>
        <div class="media-body">
          <h5 class="media-heading">
            <button type="button" class="btn btn-success btn-xs" ng-click="insertImage(item)">
              <span class="glyphicon glyphicon-upload"></span>
            </button>
            <button type="button" class="btn btn-danger btn-xs" ng-click="removeQueueItem(item)">
              <span class="glyphicon glyphicon-remove-circle"></span>
            </button>
            <small>{%item.file.size/1024|number:1%} KB
              <code>{%item.progress%}%</code>
            </small>
          </h5>
          <div class="form-group has-feedback" ng-class="{'has-success': item.newName.length >= 2, 'has-warning': item.newName.length < 2 || item.newName == null}">
            <input type="text" class="form-control input-sm col-md-2 has-error" placeholder='{{TRANSLATION "gallery.placeholder.name"}}' ng-model="item.newName" ng-blur="onGalleryItem(item, 'queue')">
            <span class="glyphicon form-control-feedback" ng-class="{'glyphicon-ok':item.newName.length >= 2,'glyphicon-warning-sign':item.newName.length < 2 || item.newName == null}"></span>
          </div>
        </div>
      </div>

      <hr class="padding-5" ng-show="storedImages.length > 0 || uploader.queue.length > 0"/>

      <div class="form-group">
        <div class="alert alert-info" ng-show="buttonAlert.msg">
          <span ng-bind="buttonAlert.msg"></span>
        </div>
        <button type="submit" class="btn-u rounded ladda-button" ladda="btnSubmit" data-style="expand-right">
          <span class="glyphicon glyphicon-upload"></span> {{TRANSLATION "common.button.write"}}
        </button>
        <button type="button" class="btn-u btn-u-default rounded" ng-click="onDiscard()">
          <span class="glyphicon glyphicon-ban-circle"></span> {{TRANSLATION "common.button.cancel"}}
        </button>
      </div>
    </form>

  </div>

  {{> footer}}

</div> <!-- /.container -->
{{#CHUNK 'css'}}
  <link rel="stylesheet" href="/unify/assets/css/pages/blog.css">
  <link rel="stylesheet" href="/bower_components/summernote/dist/summernote.css">
{{/CHUNK}}
{{#CHUNK 'js'}}
  <script type="text/javascript">
    require([
      'angular',
      'jakduk',
      {{#if (SUMMERNOTE_LOCALE locale)}}
        'summernote-{{SUMMERNOTE_LOCALE locale}}',
      {{/if}}
      'angular-file-upload',
      'angular-ladda',
      'angular-infinite-scroll',
      'angular-summernote'
    ], function (angular, Jakduk) {
      angular.module("jakdukApp", [
        "summernote", "angularFileUpload", "angular-ladda", 'jakdukCommon'
      ]).controller('FreeWriteCtrl', [
        '$scope', '$http', '$window', 'FileUploader',
      function ($scope, $http, $window, FileUploader) {
        var images = angular.fromJson('{{{DEFAULT_VALUE (JSON_STRINGIFY post.galleries) '[]'}}}');

        $scope.onSubmit = onSubmit;
        $scope.onDiscard = onDiscard;

        $scope.category = '{{post.category.code}}';
        $scope.subject = '{{post.subject}}';
        $scope.content = '{{{post.content}}}';

        $scope.categoryAlert = {};
        $scope.subjectAlert = {};
        $scope.contentAlert = {};
        $scope.buttonAlert = {};
        $scope.storedImages = [];

        images.forEach(function (entry) {
          entry._id = entry.id;
          entry._url = '{{thumbnailServerUrl}}/gallery/' + entry.id;
          $scope.storedImages.push(entry);
        });

        $window.onbeforeunload = function (e) {
          if (!$scope.btnSubmit && !$scope.boardFreeWrite.$pristine) {
            (e || $window.event).returnValue = '{{TRANSLATION "common.msg.are.you.sure.leave.page"}}';
            return '{{TRANSLATION "common.msg.are.you.sure.leave.page"}}';
          }
        };

        $scope.options = {
          height: 0,
          lang: '{{SUMMERNOTE_LOCALE locale}}',
          toolbar: [
            ['style', ['style']],
            ['font', ['bold', 'italic', 'underline', /*'superscript', 'subscript', */'strikethrough', 'clear']],
            ['fontname', ['fontname']],
            // ['fontsize', ['fontsize']], // Still buggy
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph']],
            // ['height', ['height']],
            ['table', ['table']],
            ['insert', ['link', 'picture', 'video', 'hr']],
            ['view', ['fullscreen', 'codeview']],
            ['help', ['help']]
          ]
        };

        $scope.uploader = new FileUploader({
          url: '{{apiServerUrl}}/gallery',
          autoUpload: true,
          method: 'POST',
          withCredentials: true
        });

        // 이미 등록된 이미지들 가져오기.
        $scope.onGalleryItem = function (fileItem, type) {
          var rmIdx = -1, imageInfo;

          images.forEach(function (entry, index) {
            if (entry.id === fileItem._id) {
              rmIdx = index;
            }
          });

          if (rmIdx != -1) {
            if (type == 'queue') {
              imageInfo = {
                id: fileItem._id,
                name: fileItem.newName,
                fileName: fileItem.file.name,
                size: fileItem.file.size
              };
            } else if (type == 'stored') {
              imageInfo = {
                id: fileItem._id,
                name: fileItem._name,
                fileName: fileItem.fileName,
                size: fileItem._size
              };
            }

            images.splice(rmIdx, 1, imageInfo);
          }
        };

        // 이미 등록된 이미지 삭제.
        $scope.removeStoredItem = function (fileItem) {
          if (fileItem._id) {
            $http.delete('{{apiServerUrl}}/gallery/' + fileItem._id).then(function () {
              var rmIdx = -1;

              if (!Jakduk.isEmpty($scope.storedImages)) {
                $scope.storedImages.forEach(function (entry, index) {
                  if (entry.id === fileItem._id) {
                    rmIdx = index;
                  }
                });

                if (rmIdx != -1) {
                  $scope.storedImages.splice(rmIdx, 1);
                }
              }

              images.forEach(function (entry, index) {
                if (entry.id === fileItem._id) {
                  rmIdx = index;
                }
              });

              if (rmIdx != -1) {
                images.splice(rmIdx, 1);
              }
            }, function (response) {
              console.error(response.data.message);
            });
          } else {
            fileItem.remove();
          }
        };

        // 지금 업로드한 이미지를 큐에서 삭제.
        $scope.removeQueueItem = function (fileItem) {
          if (fileItem._id) {
            $http.delete('{{apiServerUrl}}/gallery/' + fileItem._id).then(function () {
              fileItem.remove();

              var rmIdx = -1;

              images.forEach(function (entry, index) {
                if (entry.id === fileItem._id) {
                  rmIdx = index;
                }
              });

              if (rmIdx != -1) {
                images.splice(rmIdx, 1);
              }

            }, function (response) {
              console.error(response.data.message);
            });
          } else {
            fileItem.remove();
          }
        };

        // 이미지 업로드를 완료.
        $scope.uploader.onCompleteItem = function (fileItem, data, status) {
          if (status === 200) {
            fileItem._id = data.id;
            fileItem._url = data.imageUrl;

            var imageInfo = {
              id: fileItem._id,
              name: fileItem.newName,
              fileName: fileItem.file.name,
              size: fileItem.file.size
            };

            images.push(imageInfo);

            $(".summernote").summernote("insertImage", data.imageUrl, function ($image) {
              $image.addClass("img-responsive");
            });
          } else {
            fileItem.remove();
            if (status === 413) {
              window.alert('{{TRANSLATION "msg.imagefile.size.limited" size="8 MB"}}');
            } else {
              window.alert('{{TRANSLATION "common.msg.error.network.unstable"}}');
            }
          }
        };

        // 에디터 아래의 이미지 업로드 버튼을 누를 때.
        $scope.insertImage = function (fileItem) {
          $(".summernote").summernote("insertImage", fileItem._url, function ($image) {
            $image.addClass("img-responsive");
          });
        };

        $scope.imageUpload = function (files) {
          $scope.uploader.addToQueue(files);
        };

        $scope.validationCategory = function () {
          if ($scope.boardFreeWrite.category.$invalid) {
            $scope.categoryAlert = {
              "classType": "text-danger",
              "msg": '{{TRANSLATION "common.msg.required"}}'
            };
          } else {
            $scope.categoryAlert = {
              "classType": "text-success",
              "msg": '{{TRANSLATION "user.msg.available.data"}}'
            };
          }
        };

        $scope.validationSubject = function () {
          if ($scope.boardFreeWrite.subject.$invalid) {
            if ($scope.boardFreeWrite.subject.$error.required) {
              $scope.subjectAlert = {
                "classType": "text-danger",
                "msg": '{{TRANSLATION "common.msg.required"}}'
              };
            } else if ($scope.boardFreeWrite.subject.$error.minlength || $scope.boardFreeWrite.subject.$error.maxlength) {
              $scope.subjectAlert = {
                "classType": "text-danger",
                "msg": '{{TRANSLATION "Size.boardFreeWrite.subject"}}'
              };
            }
          } else {
            $scope.subjectAlert = {
              "classType": "text-success",
              "msg": '{{TRANSLATION "user.msg.available.data"}}'
            };
          }
        };

        $scope.validationContent = function () {
          if ($scope.content.length < Jakduk.SummernoteContentsMinSize) {
            $scope.contentAlert = {
              "classType": "text-danger",
              "msg": '{{TRANSLATION "Size.boardFreeWrite.content"}}'
            };
          } else {
            $scope.contentAlert = {
              "classType": "text-success",
              "msg": '{{TRANSLATION "user.msg.available.data"}}'
            };
          }
        };

        $scope.validationGalleries = function () {
          images.forEach(function (entry) {
            if (entry.name != null && (entry.name.length < 2 || entry.name.length > 50)) {
              entry.name = "";
            }
          });
        };

        function onSubmit(event) {
          if ($scope.boardFreeWrite.$valid && $scope.content.length >= Jakduk.SummernoteContentsMinSize) {
            $scope.btnSubmit = true;
            $scope.validationGalleries();

          {{#if post}}
            $http.put('{{apiServerUrl}}/board/free/{{post.seq}}', {
              subject: $scope.subject,
              content: $scope.content,
              categoryCode: $scope.category,
              galleries: images
            }).then(function () {
              $window.location = '/board/free/{{post.seq}}'
            }, function () {
              $scope.submitErred = true;
              $scope.btnSubmit = false;
            });
          {{else}}
            $http.post('{{apiServerUrl}}/board/free', {
              subject: $scope.subject,
              content: $scope.content,
              categoryCode: $scope.category,
              galleries: images
            }).then(function (response) {
              $window.location = '/board/free/' + response.data.seq
            }, function () {
              $scope.submitErred = true;
              $scope.btnSubmit = false;
            });
          {{/if}}
          } else {
            $scope.validationCategory();
            $scope.validationSubject();
            $scope.validationContent();

            $scope.isWrongContent = true;
            $scope.buttonAlert = {
              msg: '{{TRANSLATION "common.msg.need.form.validation"}}'
            };
            event.preventDefault();
          }
        }

        function onDiscard() {
          $window.location = '/board/free';
        }
      }]);

      angular.bootstrap(document, ['jakdukApp']);
    });
  </script>
{{/CHUNK}}
